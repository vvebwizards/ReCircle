<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\MorphToMany;
use Illuminate\Database\Eloquent\SoftDeletes;

class WasteItem extends Model
{
    use SoftDeletes;

    protected $fillable = [
        'generator_id',
        'maker_id',
        'title',
        'images',
        'estimated_weight',
        'condition',
        'location',
        'notes',
    ];

    protected $casts = [
        'images' => 'array',
        'location' => 'array',
        'estimated_weight' => 'decimal:2',
    ];

    public function generator(): BelongsTo
    {
        /** @phpstan-ignore-next-line return.type */
        return $this->belongsTo(User::class, 'generator_id');
    }

    public function materials(): HasMany
    {
        return $this->hasMany(Material::class, 'waste_item_id');
    }

    public function maker(): BelongsTo
    {
        /** @phpstan-ignore-next-line return.type */
        return $this->belongsTo(User::class, 'maker_id');
    }

    public function photos(): HasMany
    {
        return $this->hasMany(WasteItemImage::class)->orderBy('order');
    }

    public function bids(): HasMany
    {
        return $this->hasMany(Bid::class, 'waste_item_id');
    }

    public function getPrimaryImageAttribute(): ?string
    {
        // relation now 'photos' to avoid collision with images attribute cast
        return $this->photos->first()->image_path ?? null;
    }

    public function getPrimaryImageUrlAttribute(): string
    {
        return $this->photos->first()->image_url ?? asset('images/default-material.png');
    }

    /**
     * Get all tags attached to this waste item.
     */
    public function tags(): MorphToMany
    {
        return $this->morphToMany(Tag::class, 'taggable')
            ->withPivot('confidence', 'is_auto_generated')
            ->withTimestamps();
    }

    /**
     * Attach tags to this waste item.
     *
     * @param  array  $tagNames  Array of tag names (strings)
     * @param  bool  $isAutoGenerated  Whether tags were automatically generated
     * @param  float|null  $confidence  Confidence score for auto-generated tags
     */
    public function attachTags(array $tagNames, bool $isAutoGenerated = false, ?float $confidence = null): void
    {
        $tags = [];
        foreach ($tagNames as $name) {
            $tag = Tag::findOrCreateByName($name);
            \Log::info('[WasteItem] Found or created tag', ['name' => $name, 'id' => $tag->id]);
            $tags[$tag->id] = [
                'is_auto_generated' => $isAutoGenerated,
                'confidence' => $confidence,
            ];
        }
        if (! empty($tags)) {
            \Log::info('[WasteItem] Attaching tags', ['tags' => $tags, 'waste_item_id' => $this->id]);
            $this->tags()->syncWithoutDetaching($tags);
        }
    public function pickups()
    {
        return $this->hasMany(\App\Models\Pickup::class);
    }
}
