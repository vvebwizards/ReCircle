<?php

// app/Services/GeminiAIService.php

namespace App\Services;

use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class GeminiAIService
{
    /**
     * Generate reply suggestions for a post using Gemini
     */
    public function generateReplySuggestions(string $postContent, string $context = 'forum'): array
    {
        $cacheKey = 'gemini_reply_'.md5($postContent.$context);

        return Cache::remember($cacheKey, 3600, function () use ($postContent, $context) {
            try {
                $prompt = $this->buildReplyPrompt($postContent, $context);
                $response = $this->makeGeminiRequest($prompt);

                $suggestions = $this->parseReplySuggestions($response);

                // Only return fallbacks if we got NO suggestions from the API
                if (empty($suggestions)) {
                    throw new \Exception('No suggestions generated by API');
                }

                return array_slice($suggestions, 0, 3);

            } catch (\Exception $e) {
                \Log::error('Gemini Reply Generation Failed: '.$e->getMessage());

                return [
                    'I found this post interesting and would like to learn more about waste transformation.',
                    'This is a great point about circular economy practices.',
                    'Thank you for sharing this perspective on sustainable waste management.',
                ];
            }
        });
    }

    /**
     * Generate summary for a post using Gemini
     */
    public function generateSummary(string $content, string $title = ''): string
    {
        $cacheKey = 'gemini_summary_'.md5($content.$title);

        return Cache::remember($cacheKey, 86400, function () use ($content, $title) {
            try {
                $prompt = $this->buildSummaryPrompt($content, $title);
                $response = $this->makeGeminiRequest($prompt);

                return trim($response);

            } catch (\Exception $e) {
                Log::error('Gemini Summary Generation Failed: '.$e->getMessage());

                return 'Unable to generate summary at this time. Please try again later.';
            }
        });
    }

    /**
     * Make request to Gemini API using Laravel HTTP client
     */
    private function makeGeminiRequest(string $prompt): string
    {
        $apiKey = config('services.google_ai.api_key');

        if (! $apiKey) {
            throw new \Exception('Google AI API key not configured');
        }

        $url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={$apiKey}";

        $data = [
            'contents' => [
                [
                    'parts' => [
                        ['text' => $prompt],
                    ],
                ],
            ],
            'generationConfig' => [
                'temperature' => 0.7,
                'topK' => 40,
                'topP' => 0.95,
                'maxOutputTokens' => 1000, // Increased from 512
                'responseMimeType' => 'text/plain',
            ],
            'safetySettings' => [
                [
                    'category' => 'HARM_CATEGORY_HARASSMENT',
                    'threshold' => 'BLOCK_MEDIUM_AND_ABOVE',
                ],
                [
                    'category' => 'HARM_CATEGORY_HATE_SPEECH',
                    'threshold' => 'BLOCK_MEDIUM_AND_ABOVE',
                ],
                [
                    'category' => 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
                    'threshold' => 'BLOCK_MEDIUM_AND_ABOVE',
                ],
                [
                    'category' => 'HARM_CATEGORY_DANGEROUS_CONTENT',
                    'threshold' => 'BLOCK_MEDIUM_AND_ABOVE',
                ],
            ],
        ];

        $response = Http::timeout(30)
            ->retry(2, 100)
            ->withHeaders([
                'Content-Type' => 'application/json',
            ])
            ->post($url, $data);

        if (! $response->successful()) {
            throw new \Exception('Gemini API request failed: '.$response->status().' - '.$response->body());
        }

        $responseData = $response->json();

        \Log::info('Gemini API Response', ['response' => $responseData]);

        // Check if we have valid content
        if (! isset($responseData['candidates'][0]['content']['parts'][0]['text'])) {
            // Check for finish reason
            $finishReason = $responseData['candidates'][0]['finishReason'] ?? 'UNKNOWN';
            throw new \Exception('No text content in response. Finish reason: '.$finishReason);
        }

        $text = $responseData['candidates'][0]['content']['parts'][0]['text'];

        if (empty(trim($text))) {
            throw new \Exception('Empty response from Gemini API');
        }

        return $text;
    }

    private function buildReplyPrompt(string $postContent, string $context): string
    {
        // Truncate very long content to avoid token limits
        $truncatedContent = strlen($postContent) > 1500
            ? substr($postContent, 0, 1500).'...'
            : $postContent;

        return "You are a helpful assistant for ReCircle, a waste transformation and circular economy forum.

Generate exactly 3 helpful and constructive reply suggestions for this forum post.

IMPORTANT: Format each suggestion on a new line starting with exactly 'Suggestion X:' where X is 1, 2, or 3.

Requirements:
- Keep suggestions friendly, engaging, and practical
- Focus on waste reduction, recycling, composting, or sustainable practices
- Make them relevant to the post content
- Each suggestion should be 1-2 sentences maximum
- Ensure the response contains exactly 3 suggestions

Post Context: {$context}

Post Content: {$truncatedContent}

Now generate exactly 3 reply suggestions following the required format:";
    }

    private function buildSummaryPrompt(string $content, string $title): string
    {
        // Truncate very long content
        $truncatedContent = strlen($content) > 2500
            ? substr($content, 0, 2500).'...'
            : $content;

        $prompt = 'Please provide a concise TL;DR summary (2-3 sentences maximum) of the following content from ReCircle, a waste transformation forum.';

        if ($title) {
            $prompt .= " Focus on the key points about: {$title}";
        }

        $prompt .= "\n\nContent:\n{$truncatedContent}\n\nSummary:";

        return $prompt;
    }

    private function parseReplySuggestions(string $content): array
    {
        $suggestions = [];
        $lines = explode("\n", trim($content));

        foreach ($lines as $line) {
            $line = trim($line);

            // Match patterns like "Suggestion 1: text" or "1. text" etc.
            if (preg_match('/^(?:Suggestion\s*)?\d+[:.)]\s*(.+)$/i', $line, $matches)) {
                $suggestion = trim($matches[1]);
                if (! empty($suggestion) && strlen($suggestion) > 10) {
                    $suggestions[] = $suggestion;
                }
            } elseif (preg_match('/^[-*]\s*(.+)$/', $line, $matches)) {
                $suggestion = trim($matches[1]);
                if (! empty($suggestion) && strlen($suggestion) > 10) {
                    $suggestions[] = $suggestion;
                }
            } elseif (! empty($line) && count($suggestions) < 3 && strlen($line) > 15) {
                // Only use as fallback if it's substantial content
                $suggestions[] = $line;
            }
        }

        return $suggestions;
    }
}
