name: CD (Laravel to Railway)

on:
  push:
    branches: ["main"]
  # Optional: Also trigger on release creation
  release:
    types: [published]

jobs:
  # First, run critical tests to ensure deployment readiness
  pre-deployment-checks:
    runs-on: ubuntu-latest
    name: Pre-deployment Verification
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --no-dev

      - name: Run critical tests only
        run: |
          cp .env.example .env
          php artisan key:generate
          mkdir -p database
          touch database/database.sqlite
          php artisan migrate --force --env=testing
          php artisan test --testsuite=Feature --stop-on-failure

  # Build frontend assets for production
  build-frontend:
    runs-on: ubuntu-latest
    name: Build Frontend Assets
    needs: pre-deployment-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'

      - name: Install and build frontend
        run: |
          npm ci
          npm run build

      - name: Upload built assets
        uses: actions/upload-artifact@v4
        with:
          name: frontend-assets
          path: |
            public/build
            public/hot
          retention-days: 1

  # Security and quality checks
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: pre-deployment-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2

      - name: Install dependencies (without dev)
        run: composer install --prefer-dist --no-progress --no-interaction --no-dev

      - name: Run security check
        run: |
          # Install security checker if not present
          composer require --dev enlightn/security-checker
          ./vendor/bin/security-checker security:check ./composer.lock

      - name: Check for exposed secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Prepare and deploy to Railway
  deploy-to-railway:
    runs-on: ubuntu-latest
    name: Deploy to Railway
    needs: [pre-deployment-checks, build-frontend, security-scan]
    environment:
      name: production
      url: https://your-app-name.railway.app  # Update with your Railway URL
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download built assets
        uses: actions/download-artifact@v4
        with:
          name: frontend-assets
          path: ./

      - name: Setup Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway up --service your-service-name --detach
        # Alternative deployment method using Railway's GitHub integration:
        # If you've connected your repo in Railway dashboard, you can simply push
        # But this gives you more control over the deployment process

  # Post-deployment verification
  post-deployment-checks:
    runs-on: ubuntu-latest
    name: Post-deployment Verification
    needs: deploy-to-railway
    steps:
      - name: Wait for deployment to be ready
        run: sleep 30  # Wait for Railway to complete deployment

      - name: Check application health
        run: |
          # Replace with your actual Railway app URL
          curl -f https://your-app-name.railway.app/api/health \
          || curl -f https://your-app-name.railway.app \
          || echo "Health check failed but deployment might still be in progress"

      - name: Run smoke tests
        run: |
          # Basic smoke test to verify deployment
          curl -s https://your-app-name.railway.app | grep -q "Laravel" && echo "Smoke test passed" || echo "Smoke test failed"

  # Optional: Notify deployment status
  notify:
    runs-on: ubuntu-latest
    name: Notify Team
    needs: [deploy-to-railway, post-deployment-checks]
    if: always()  # Run regardless of previous job status
    steps:
      - name: Notify Slack on success
        if: needs.deploy-to-railway.result == 'success' && needs.post-deployment-checks.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'üöÄ Deployment to Railway completed successfully!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: needs.deploy-to-railway.result == 'failure' || needs.post-deployment-checks.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå Deployment to Railway failed! Check GitHub Actions logs.'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
